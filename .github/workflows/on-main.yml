name: Build Main

on:
  push:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x' # The .NET SDK version to use

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore

      - name: Run build
        run: dotnet build --configuration Release

      - name: Build Tag
        if: github.event_name == 'push'
        run: |
          # find the highest-numbered version tag, bump the patch
          # version, and push that as a new tag.
          #
          # if the patch version was omitted, restart numbering there.
          #
          # example:
          #   3.1.0 yields 3.1.1
          #   3.2 yields 3.2.0
          #   <no tags> yields 0.0.1
          #   abc-1.2.9 yields abc-1.2.10

          git fetch --tags origin
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          GIT_TAGS=$(git tag | egrep '^[0-9]+\.[0-9]+(\.[0-9]+)?$' || true)

          if [ -z "$GIT_TAGS" ]; then
            LATEST="0.0.0"
          else
            LATEST=$(
              git tag --list |
              egrep '^[0-9]+\.[0-9]+(\.[0-9]+)?$' |
              sort -V |
              tail -n 1
            )
          fi

           if echo $LATEST | egrep '^[0-9]+\.[0-9]+$'; then
            BUMPED="${LATEST}.0"
          else
            BUMPED=$(echo $LATEST | awk -F. '{ print $1 "." $2 "." ($3 + 1) }')
          fi

          echo "bumping ${LATEST} to ${BUMPED}"

          git tag --annotate "$BUMPED" --message "via GitHub Actions"
          git push origin "$BUMPED"      