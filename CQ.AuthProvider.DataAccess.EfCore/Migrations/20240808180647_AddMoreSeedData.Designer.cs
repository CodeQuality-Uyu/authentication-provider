// <auto-generated />
using System;
using CQ.AuthProvider.DataAccess.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQ.AuthProvider.DataAccess.EfCore.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20240808180647_AddMoreSeedData")]
    partial class AddMoreSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AppId");

                    b.ToTable("AccountsApps");

                    b.HasData(
                        new
                        {
                            Id = "ef03980ea2a54e4bba92e022fbd33d9b",
                            AccountId = "5a0d9e179991499e80db0a15fda4df79",
                            AppId = "d31184dabbc6435eaec86694650c2679"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "5a0d9e179991499e80db0a15fda4df79",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seed@cq.com",
                            FirstName = "Seed",
                            FullName = "Seed Seed",
                            LastName = "Seed",
                            Locale = "Uruguay",
                            TenantId = "b22fcf202bd84a97936ccf2949e00da4",
                            TimeZone = "-3"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountsRoles");

                    b.HasData(
                        new
                        {
                            Id = "9dc669b28b0f4f3fb8a832961a76a6c9",
                            AccountId = "5a0d9e179991499e80db0a15fda4df79",
                            RoleId = "4c00f792d8ed43768846711094902d8c"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Permissions.PermissionEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("TenantId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "d40ad347c7f943e399069eef409b4fa6",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read permissions",
                            IsPublic = true,
                            Key = "getall-permission",
                            Name = "Can read permissions"
                        },
                        new
                        {
                            Id = "aca002cfbf3a47899ff4c16e6be2c029",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read roles",
                            IsPublic = true,
                            Key = "getall-role",
                            Name = "Can read roles"
                        },
                        new
                        {
                            Id = "d56a38db0db2439f8ee15a142b22b33b",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read permissions of tenant",
                            IsPublic = false,
                            Key = "can-read-permissions-of-tenant",
                            Name = "Can read permissions of tenant"
                        },
                        new
                        {
                            Id = "e0132221c91f44ada257a38d951407d6",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read private permissions",
                            IsPublic = false,
                            Key = "can-read-private-permissions",
                            Name = "Can read private permissions"
                        },
                        new
                        {
                            Id = "05276f2a25dc4db5b37b0948e05c35ab",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read roles of tenant",
                            IsPublic = false,
                            Key = "can-read-roles-of-tenant",
                            Name = "Can read roles of tenant"
                        },
                        new
                        {
                            Id = "1ce9908dba38490cbc65389bfeece21e",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read private roles",
                            IsPublic = false,
                            Key = "can-read-private-roles",
                            Name = "Can read private roles"
                        },
                        new
                        {
                            Id = "80ca0e41ea5046519f351a99b03b294e",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Can read invitations of tenant",
                            IsPublic = false,
                            Key = "can-read-invitations-of-tenant",
                            Name = "Can read invitations of tenant",
                            TenantId = "b22fcf202bd84a97936ccf2949e00da4"
                        },
                        new
                        {
                            Id = "e2d42874c56e46319b21eeb817f3b988",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Joker",
                            IsPublic = false,
                            Key = "*",
                            Name = "Joker"
                        },
                        new
                        {
                            Id = "920d910719224496b575618a9495d2c4",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Full accesss",
                            IsPublic = false,
                            Key = "full-access",
                            Name = "Full access",
                            TenantId = "b22fcf202bd84a97936ccf2949e00da4"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.ResetPasswords.ResetPasswordEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetPasswords");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "4c00f792d8ed43768846711094902d8c",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Auth API Owner",
                            IsDefault = false,
                            IsPublic = false,
                            Name = "Auth API Owner",
                            TenantId = "b22fcf202bd84a97936ccf2949e00da4"
                        },
                        new
                        {
                            Id = "5c2260fc58864b75a4cad5c0e7dd57cb",
                            AppId = "d31184dabbc6435eaec86694650c2679",
                            Description = "Tenant Owner",
                            IsDefault = false,
                            IsPublic = true,
                            Name = "Tenant Owner",
                            TenantId = "b22fcf202bd84a97936ccf2949e00da4"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            Id = "080873f63bff4e9a9687ac70658b710b",
                            PermissionId = "e2d42874c56e46319b21eeb817f3b988",
                            RoleId = "5c2260fc58864b75a4cad5c0e7dd57cb"
                        },
                        new
                        {
                            Id = "4909564462b040289d0dc0758cf8942e",
                            PermissionId = "e2d42874c56e46319b21eeb817f3b988",
                            RoleId = "4c00f792d8ed43768846711094902d8c"
                        },
                        new
                        {
                            Id = "64ec1b6bbd3d4c49b609c0f58359e7ac",
                            PermissionId = "e2d42874c56e46319b21eeb817f3b988",
                            RoleId = "4c00f792d8ed43768846711094902d8c"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Sessions.SessionEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AppId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountApp", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("App");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany("Accounts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountRole", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Permissions.PermissionEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany("Permissions")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("App");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.ResetPasswords.ResetPasswordEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany("Roles")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Roles.RolePermission", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Permissions.PermissionEfCore", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Roles.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Sessions.SessionEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("App");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.DataAccess.EfCore.Accounts.AccountEfCore", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Apps.AppEfCore", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.EfCore.Tenants.TenantEfCore", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
