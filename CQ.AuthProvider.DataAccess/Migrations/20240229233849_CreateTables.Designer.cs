// <auto-generated />
using System;
using CQ.AuthProvider.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQ.AuthProvider.DataAccess.Migrations
{
    [DbContext(typeof(AuthEfCoreContext))]
    [Migration("20240229233849_CreateTables")]
    partial class CreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "d4702564-8273-495b-a694-82fcc69da874",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 2, 29, 23, 38, 49, 492, DateTimeKind.Unspecified).AddTicks(469), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            Name = "Admin Admin"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "812c61a4cfa74f3d867d3e605186c8ca",
                            Description = "Obtener un permiso",
                            IsPublic = false,
                            Key = "getbyid-permission",
                            Name = "Obtener un permiso"
                        },
                        new
                        {
                            Id = "45779b456d0f478da758125001503210",
                            Description = "Obtener todos los permisos",
                            IsPublic = false,
                            Key = "getall-permission",
                            Name = "Obtener permisos"
                        },
                        new
                        {
                            Id = "cd94dfb75151470f905f4e24604c1871",
                            Description = "Obtener permisos publicos",
                            IsPublic = false,
                            Key = "getpublic-permission",
                            Name = "Obtener permisos publicos"
                        },
                        new
                        {
                            Id = "5f2e5b22569b4f6792b13ae81ed8c958",
                            Description = "Crear permiso",
                            IsPublic = false,
                            Key = "create-permission",
                            Name = "Crear permiso"
                        },
                        new
                        {
                            Id = "69c149db690b4825a3e55d49256cd9ee",
                            Description = "Actualizar un permiso",
                            IsPublic = false,
                            Key = "updatebyid-permission",
                            Name = "Actualizar un permiso"
                        },
                        new
                        {
                            Id = "fd325e386f7c4652bbab42712a65c2c8",
                            Description = "Crear rol",
                            IsPublic = false,
                            Key = "create-rol",
                            Name = "Crear rol"
                        },
                        new
                        {
                            Id = "054240e399f2467b89791ee5678b126b",
                            Description = "Obtener un rol",
                            IsPublic = false,
                            Key = "getbyid-rol",
                            Name = "Obtener un rol"
                        },
                        new
                        {
                            Id = "5901e6ddaa8e4846932feeff2b7eb43a",
                            Description = "Obtener todos los roles",
                            IsPublic = false,
                            Key = "getall-permission",
                            Name = "Obtener roles"
                        },
                        new
                        {
                            Id = "1de1006bcc3644769f82d4e2431e522c",
                            Description = "Obtener roles publicos",
                            IsPublic = false,
                            Key = "getpublic-rol",
                            Name = "Obtener roles publicos"
                        },
                        new
                        {
                            Id = "1b19c58b29984320b65b41d57beadd1d",
                            Description = "Actualizar un rol",
                            IsPublic = false,
                            Key = "updatebyid-rol",
                            Name = "Actualizar un rol"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ad34233fc5694b019b7c5cc5e5c959b2",
                            Description = "Admin",
                            IsPublic = false,
                            Key = "admin",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetPasswordApplications");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountsRoles");

                    b.HasData(
                        new
                        {
                            AccountId = "d4702564-8273-495b-a694-82fcc69da874",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.RolePermission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "5f2e5b22569b4f6792b13ae81ed8c958",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "45779b456d0f478da758125001503210",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "812c61a4cfa74f3d867d3e605186c8ca",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "cd94dfb75151470f905f4e24604c1871",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "69c149db690b4825a3e55d49256cd9ee",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "fd325e386f7c4652bbab42712a65c2c8",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "5901e6ddaa8e4846932feeff2b7eb43a",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "1de1006bcc3644769f82d4e2431e522c",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "054240e399f2467b89791ee5678b126b",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        },
                        new
                        {
                            PermissionId = "1b19c58b29984320b65b41d57beadd1d",
                            RoleId = "ad34233fc5694b019b7c5cc5e5c959b2"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.RolePermission", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
