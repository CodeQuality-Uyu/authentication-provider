// <auto-generated />
using System;
using CQ.AuthProvider.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQ.AuthProvider.DataAccess.Migrations
{
    [DbContext(typeof(AuthEfCoreContext))]
    [Migration("20240327175928_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "d47025648273495ba69482fcc69da874",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 3, 27, 17, 59, 27, 894, DateTimeKind.Unspecified).AddTicks(9841), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            FullName = "Admin Admin",
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "105bb9d29d0f4928b6dceb7d9da744ba",
                            Description = "Crear permiso",
                            IsPublic = false,
                            Key = "create-permission",
                            Name = "Crear permiso"
                        },
                        new
                        {
                            Id = "1e5792159aeb465fba1368f7ff835e2c",
                            Description = "Crear muchos permisos",
                            IsPublic = false,
                            Key = "createbulk-permission",
                            Name = "Crear muchos permisos"
                        },
                        new
                        {
                            Id = "6ca46b22fcd74070a55d883682991637",
                            Description = "Obtener un permiso",
                            IsPublic = false,
                            Key = "getbyid-permission",
                            Name = "Obtener un permiso"
                        },
                        new
                        {
                            Id = "7d97d5a3a3624a94a9dcde6aa2a55339",
                            Description = "Obtener todos los permisos",
                            IsPublic = false,
                            Key = "getall-permission",
                            Name = "Obtener permisos"
                        },
                        new
                        {
                            Id = "ed6dd49edba74f5da4f898ec6c860481",
                            Description = "Obtener permisos privados",
                            IsPublic = false,
                            Key = "getallprivate-permission",
                            Name = "Obtener permisos privados"
                        },
                        new
                        {
                            Id = "5f83e7a5640e4eb4aa7f4c3e0b6985ac",
                            Description = "Obtener permisos de un rol",
                            IsPublic = false,
                            Key = "getallbyroleid-permission",
                            Name = "Obtener permisos de un rol"
                        },
                        new
                        {
                            Id = "073b1c6e9ddf4ebd9528aaa64d938916",
                            Description = "Actualizar un permiso",
                            IsPublic = false,
                            Key = "updatebyid-permission",
                            Name = "Actualizar un permiso"
                        },
                        new
                        {
                            Id = "da51cccd7517426ca78d8c6bbec9026c",
                            Description = "Crear rol",
                            IsPublic = false,
                            Key = "create-role",
                            Name = "Crear rol"
                        },
                        new
                        {
                            Id = "0031a0bc0aac4e2a9cd94ed9796bbee8",
                            Description = "Crear muchos roles",
                            IsPublic = false,
                            Key = "createbulk-role",
                            Name = "Crear muchos roles"
                        },
                        new
                        {
                            Id = "f16e3d89c187463791da4625fdb14589",
                            Description = "Obtener un rol",
                            IsPublic = false,
                            Key = "getbyid-role",
                            Name = "Obtener un rol"
                        },
                        new
                        {
                            Id = "243e9036a6b542478e068e56a30e11d1",
                            Description = "Obtener todos los roles",
                            IsPublic = false,
                            Key = "getall-role",
                            Name = "Obtener roles"
                        },
                        new
                        {
                            Id = "b67bdf587d50422f907d065d9e709bf9",
                            Description = "Obtener roles privados",
                            IsPublic = false,
                            Key = "getallprivate-role",
                            Name = "Obtener roles privados"
                        },
                        new
                        {
                            Id = "f1ae8a44eb954f5083d4f48dbd321525",
                            Description = "Actualizar un rol",
                            IsPublic = false,
                            Key = "addpermission-role",
                            Name = "Actualizar un rol"
                        },
                        new
                        {
                            Id = "f0b3321ff1c6426092c398ff3e4110f2",
                            Description = "Crear client system",
                            IsPublic = false,
                            Key = "create-clientsystem",
                            Name = "Crear client system"
                        },
                        new
                        {
                            Id = "b3d1e8d0e72b4bef864417feec140d7c",
                            Description = "Crear cuenta para un usuario",
                            IsPublic = false,
                            Key = "createcredentialsfor-account",
                            Name = "Crear cuenta para un usuario"
                        },
                        new
                        {
                            Id = "ef577b64f9c741f6b68a2732db49f2e5",
                            Description = "Crear usuario en sistema cliente",
                            IsPublic = false,
                            Key = "createfromauthprovider-user",
                            Name = "Crear usuario en sistema cliente"
                        },
                        new
                        {
                            Id = "85c4f11e41c64468a9eb4b657d7f992d",
                            Description = "Joker",
                            IsPublic = false,
                            Key = "*",
                            Name = "Joker"
                        },
                        new
                        {
                            Id = "0a0027c493804ee39499684aabc36c6d",
                            Description = "Obtener usuario por id de sistema cliente",
                            IsPublic = false,
                            Key = "getbyidfromauthprovider-user",
                            Name = "Obtener usuario por id de sistema cliente"
                        },
                        new
                        {
                            Id = "d750f3ec5a824cd8995bd981facab2bc",
                            Description = "Obtener la cuenta por token de sistema cliente",
                            IsPublic = false,
                            Key = "getbytoken-account",
                            Name = "Obtener la cuenta por token de sistema cliente"
                        },
                        new
                        {
                            Id = "9af1865df2fc487b8456c39625988ced",
                            Description = "Validar token",
                            IsPublic = false,
                            Key = "validatetoken-session",
                            Name = "Validar token"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "71bcf11229094af4bd29239f6e850688",
                            Description = "Admin",
                            IsDefault = false,
                            IsPublic = false,
                            Key = "admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "6565ebacc3a94007873967d083e9def0",
                            Description = "Client System",
                            IsDefault = false,
                            IsPublic = false,
                            Key = "clientSystem",
                            Name = "Client System"
                        },
                        new
                        {
                            Id = "bcc1589004f54f0e91e67295a46a9140",
                            Description = "Auth provider",
                            IsDefault = false,
                            IsPublic = false,
                            Key = "authProviderClientSystem",
                            Name = "Auth provider"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RolePermission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "105bb9d29d0f4928b6dceb7d9da744ba",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "6ca46b22fcd74070a55d883682991637",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "7d97d5a3a3624a94a9dcde6aa2a55339",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "ed6dd49edba74f5da4f898ec6c860481",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "5f83e7a5640e4eb4aa7f4c3e0b6985ac",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "073b1c6e9ddf4ebd9528aaa64d938916",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "da51cccd7517426ca78d8c6bbec9026c",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "f16e3d89c187463791da4625fdb14589",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "243e9036a6b542478e068e56a30e11d1",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "b67bdf587d50422f907d065d9e709bf9",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "f1ae8a44eb954f5083d4f48dbd321525",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "f0b3321ff1c6426092c398ff3e4110f2",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "b3d1e8d0e72b4bef864417feec140d7c",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        },
                        new
                        {
                            PermissionId = "1e5792159aeb465fba1368f7ff835e2c",
                            RoleId = "6565ebacc3a94007873967d083e9def0"
                        },
                        new
                        {
                            PermissionId = "0031a0bc0aac4e2a9cd94ed9796bbee8",
                            RoleId = "6565ebacc3a94007873967d083e9def0"
                        },
                        new
                        {
                            PermissionId = "d750f3ec5a824cd8995bd981facab2bc",
                            RoleId = "6565ebacc3a94007873967d083e9def0"
                        },
                        new
                        {
                            PermissionId = "9af1865df2fc487b8456c39625988ced",
                            RoleId = "6565ebacc3a94007873967d083e9def0"
                        },
                        new
                        {
                            PermissionId = "ef577b64f9c741f6b68a2732db49f2e5",
                            RoleId = "bcc1589004f54f0e91e67295a46a9140"
                        },
                        new
                        {
                            PermissionId = "0a0027c493804ee39499684aabc36c6d",
                            RoleId = "bcc1589004f54f0e91e67295a46a9140"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ClientSystems.ClientSystemEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ClientSystems");

                    b.HasData(
                        new
                        {
                            Id = "c7af32e7bbc34e26a72924c0d3ad9aad",
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 3, 27, 17, 59, 27, 894, DateTimeKind.Unspecified).AddTicks(9851), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Authentication Server Provider",
                            PrivateKey = "250f9196a3df4163b5a249f30a3a1382",
                            RoleId = "bcc1589004f54f0e91e67295a46a9140"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetPasswordApplications");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountsRoles");

                    b.HasData(
                        new
                        {
                            AccountId = "d47025648273495ba69482fcc69da874",
                            RoleId = "71bcf11229094af4bd29239f6e850688"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RolePermission", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ClientSystems.ClientSystemEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
