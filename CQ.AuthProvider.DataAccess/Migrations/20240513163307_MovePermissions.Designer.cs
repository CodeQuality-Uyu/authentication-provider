// <auto-generated />
using System;
using CQ.AuthProvider.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQ.AuthProvider.DataAccess.Migrations
{
    [DbContext(typeof(AuthEfCoreContext))]
    [Migration("20240513163307_MovePermissions")]
    partial class MovePermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "d47025648273495ba69482fcc69da874",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 5, 13, 16, 33, 7, 249, DateTimeKind.Unspecified).AddTicks(6694), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            FullName = "Admin Admin",
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "8046303599db476eaa62cf9a4873680c",
                            Description = "Crear permiso",
                            IsPublic = false,
                            Key = "create-permission",
                            Name = "Crear permiso"
                        },
                        new
                        {
                            Id = "f6dfd1dee30042a3b4b719c5f9d4861b",
                            Description = "Crear muchos permisos",
                            IsPublic = false,
                            Key = "createbulk-permission",
                            Name = "Crear muchos permisos"
                        },
                        new
                        {
                            Id = "e25d0b1160c14d3485999bd9f9ab5490",
                            Description = "Obtener un permiso",
                            IsPublic = false,
                            Key = "getbyid-permission",
                            Name = "Obtener un permiso"
                        },
                        new
                        {
                            Id = "210d8698918c40c8b8e302c35a3523e5",
                            Description = "Obtener todos los permisos",
                            IsPublic = false,
                            Key = "getall-permission",
                            Name = "Obtener permisos"
                        },
                        new
                        {
                            Id = "3444dbe534ea488991dd10501355a925",
                            Description = "Obtener permisos privados",
                            IsPublic = false,
                            Key = "getallprivate-permission",
                            Name = "Obtener permisos privados"
                        },
                        new
                        {
                            Id = "f043868bcbd74ccab60ccf434c7da0c4",
                            Description = "Obtener permisos de un rol",
                            IsPublic = false,
                            Key = "getallbyroleid-permission",
                            Name = "Obtener permisos de un rol"
                        },
                        new
                        {
                            Id = "6342efeaac844e159deefa3727ca4bab",
                            Description = "Actualizar un permiso",
                            IsPublic = false,
                            Key = "updatebyid-permission",
                            Name = "Actualizar un permiso"
                        },
                        new
                        {
                            Id = "f416d065609b4df28ca26cf8dfa1180c",
                            Description = "Crear rol",
                            IsPublic = false,
                            Key = "create-role",
                            Name = "Crear rol"
                        },
                        new
                        {
                            Id = "7df82153fefd4c12b54f85a6cb0eedc6",
                            Description = "Crear muchos roles",
                            IsPublic = false,
                            Key = "createbulk-role",
                            Name = "Crear muchos roles"
                        },
                        new
                        {
                            Id = "4f2f35c3c49d4aaca161b18607874f7c",
                            Description = "Obtener un rol",
                            IsPublic = false,
                            Key = "getbyid-role",
                            Name = "Obtener un rol"
                        },
                        new
                        {
                            Id = "4122d0b4b2db40bea6417a27f013ae46",
                            Description = "Obtener todos los roles",
                            IsPublic = false,
                            Key = "getall-role",
                            Name = "Obtener roles"
                        },
                        new
                        {
                            Id = "da48186536fe4656a93627aa6403b202",
                            Description = "Obtener roles privados",
                            IsPublic = false,
                            Key = "getallprivate-role",
                            Name = "Obtener roles privados"
                        },
                        new
                        {
                            Id = "7044ad611b1340baade95ea771c2c705",
                            Description = "Actualizar un rol",
                            IsPublic = false,
                            Key = "addpermission-role",
                            Name = "Actualizar un rol"
                        },
                        new
                        {
                            Id = "77423e9af2fd4eacb5054356f2f9981c",
                            Description = "Crear client system",
                            IsPublic = false,
                            Key = "create-clientsystem",
                            Name = "Crear client system"
                        },
                        new
                        {
                            Id = "a5d958d6acb947d3ba591ba2bd3ac9f6",
                            Description = "Crear cuenta para un usuario",
                            IsPublic = false,
                            Key = "createcredentialsfor-account",
                            Name = "Crear cuenta para un usuario"
                        },
                        new
                        {
                            Id = "cd52f7af4a5a4e39b2cdec5f7ca8f6e3",
                            Description = "Joker",
                            IsPublic = false,
                            Key = "*",
                            Name = "Joker"
                        },
                        new
                        {
                            Id = "d2f2a0c007e149778e00109c77acf87e",
                            Description = "Validar token",
                            IsPublic = false,
                            Key = "validatetoken-session",
                            Name = "Validar token"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "28d3a06deaa4432ea1fec0b399261291",
                            Description = "Admin",
                            IsDefault = false,
                            IsPublic = false,
                            Key = "admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "6031973784584a03a372a0a63f270657",
                            Description = "Client System",
                            IsDefault = false,
                            IsPublic = false,
                            Key = "clientSystem",
                            Name = "Client System"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RolePermission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "8046303599db476eaa62cf9a4873680c",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "e25d0b1160c14d3485999bd9f9ab5490",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "210d8698918c40c8b8e302c35a3523e5",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "3444dbe534ea488991dd10501355a925",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "f043868bcbd74ccab60ccf434c7da0c4",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "6342efeaac844e159deefa3727ca4bab",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "f416d065609b4df28ca26cf8dfa1180c",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "4f2f35c3c49d4aaca161b18607874f7c",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "4122d0b4b2db40bea6417a27f013ae46",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "da48186536fe4656a93627aa6403b202",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "7044ad611b1340baade95ea771c2c705",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "77423e9af2fd4eacb5054356f2f9981c",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "a5d958d6acb947d3ba591ba2bd3ac9f6",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "f6dfd1dee30042a3b4b719c5f9d4861b",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "7df82153fefd4c12b54f85a6cb0eedc6",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        },
                        new
                        {
                            PermissionId = "d2f2a0c007e149778e00109c77acf87e",
                            RoleId = "6031973784584a03a372a0a63f270657"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ClientSystems.ClientSystemEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ClientSystems");
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetPasswordApplications");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountsRoles");

                    b.HasData(
                        new
                        {
                            AccountId = "d47025648273495ba69482fcc69da874",
                            RoleId = "28d3a06deaa4432ea1fec0b399261291"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RolePermission", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ClientSystems.ClientSystemEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
