// <auto-generated />
using System;
using CQ.AuthProvider.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQ.AuthProvider.DataAccess.Migrations
{
    [DbContext(typeof(AuthEfCoreContext))]
    partial class AuthEfCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "d4702564-8273-495b-a694-82fcc69da874",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 3, 2, 21, 27, 46, 256, DateTimeKind.Unspecified).AddTicks(6917), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            Name = "Admin Admin"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "6a41bc423a494a63a80f5da9dd0ae277",
                            Description = "Crear permiso",
                            IsPublic = false,
                            Key = "create-permission",
                            Name = "Crear permiso"
                        },
                        new
                        {
                            Id = "13ce67315ae5464c889a25379c6b32a5",
                            Description = "Obtener un permiso",
                            IsPublic = false,
                            Key = "getbyid-permission",
                            Name = "Obtener un permiso"
                        },
                        new
                        {
                            Id = "7e702bcc9a704e53b1842dccb90271fb",
                            Description = "Obtener todos los permisos",
                            IsPublic = false,
                            Key = "getall-permission",
                            Name = "Obtener permisos"
                        },
                        new
                        {
                            Id = "369a991cec3f40f489c821774d3ede06",
                            Description = "Obtener permisos privados",
                            IsPublic = false,
                            Key = "getallprivate-permission",
                            Name = "Obtener permisos privados"
                        },
                        new
                        {
                            Id = "78d5bee419524cfeb3596078878427d0",
                            Description = "Obtener permisos de un rol",
                            IsPublic = false,
                            Key = "getallbyroleid-permission",
                            Name = "Obtener permisos de un rol"
                        },
                        new
                        {
                            Id = "0682cd66199645e5a1fb5ba483cbf9c8",
                            Description = "Actualizar un permiso",
                            IsPublic = false,
                            Key = "updatebyid-permission",
                            Name = "Actualizar un permiso"
                        },
                        new
                        {
                            Id = "7815af8db7a1454f896c3adfd26f341c",
                            Description = "Crear rol",
                            IsPublic = false,
                            Key = "create-role",
                            Name = "Crear rol"
                        },
                        new
                        {
                            Id = "e894d54c71e24fff9d14f9dc3e35663d",
                            Description = "Obtener un rol",
                            IsPublic = false,
                            Key = "getbyid-role",
                            Name = "Obtener un rol"
                        },
                        new
                        {
                            Id = "46536c750bda4544873621b341667faa",
                            Description = "Obtener todos los roles",
                            IsPublic = false,
                            Key = "getall-role",
                            Name = "Obtener roles"
                        },
                        new
                        {
                            Id = "82f67574fc7c45baae4bee48445f6c7b",
                            Description = "Obtener roles privados",
                            IsPublic = false,
                            Key = "getallprivate-role",
                            Name = "Obtener roles privados"
                        },
                        new
                        {
                            Id = "ea6d3f0d41ea482393d00d23cfce9f24",
                            Description = "Actualizar un rol",
                            IsPublic = false,
                            Key = "addpermission-role",
                            Name = "Actualizar un rol"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ebe421fd52724468bb1b870cf30eec1b",
                            Description = "Admin",
                            IsPublic = false,
                            Key = "admin",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ResetPasswordApplications");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountsRoles");

                    b.HasData(
                        new
                        {
                            AccountId = "d4702564-8273-495b-a694-82fcc69da874",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.RolePermission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "6a41bc423a494a63a80f5da9dd0ae277",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "13ce67315ae5464c889a25379c6b32a5",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "7e702bcc9a704e53b1842dccb90271fb",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "369a991cec3f40f489c821774d3ede06",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "78d5bee419524cfeb3596078878427d0",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "0682cd66199645e5a1fb5ba483cbf9c8",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "7815af8db7a1454f896c3adfd26f341c",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "e894d54c71e24fff9d14f9dc3e35663d",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "46536c750bda4544873621b341667faa",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "82f67574fc7c45baae4bee48445f6c7b",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        },
                        new
                        {
                            PermissionId = "ea6d3f0d41ea482393d00d23cfce9f24",
                            RoleId = "ebe421fd52724468bb1b870cf30eec1b"
                        });
                });

            modelBuilder.Entity("CQ.AuthProvider.BusinessLogic.ResetPasswords.ResetPasswordApplicationEfCore", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.AccountRole", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Accounts.AccountEfCore", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CQ.AuthProvider.DataAccess.Contexts.RolePermission", b =>
                {
                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.PermissionEfCore", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CQ.AuthProvider.BusinessLogic.Authorizations.RoleEfCore", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
